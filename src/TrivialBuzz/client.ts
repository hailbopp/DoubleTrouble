/**
 * Trivial Buzz
 * JSON API serving roughly 200,000 trivia questions from the popular gameshow, Jeopardy! spanning 1984 - 2012. This project is unaffiliated with the Jeopardy! gameshow and claims no ownership of the questions. Questions were obtained by crawling www.j-archive.com . This is a project developed in my free time using Ruby on Rails on the backend and Swagger for documentation. An API key is not required. See more at https://github.com/abd00s/trivial-buzz Ensure proper pointing to endpoints `/api/ [version e.g. v1] /[endpoint] .json` for example `www.trivialbuzz.com/api/v1/search.json?query=abdullah`
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://www.trivialbuzz.com/api/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class CategoriesIndex {
    'id'?: number;
    'name'?: string;
    'url'?: string;
    'questionsCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "questionsCount",
            "baseName": "questions_count",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return CategoriesIndex.attributeTypeMap;
    }
}

export class CategoriesResponse {
    'categories'?: Array<CategoriesIndex>;
    'meta'?: MetaModel;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<CategoriesIndex>"
        },
        {
            "name": "meta",
            "baseName": "meta",
            "type": "MetaModel"
        }    ];

    static getAttributeTypeMap() {
        return CategoriesResponse.attributeTypeMap;
    }
}

export class CategoriesShows {
    'id'?: number;
    'name'?: string;
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CategoriesShows.attributeTypeMap;
    }
}

export class Category {
    'id'?: number;
    'name'?: string;
    'questionsCount'?: number;
    'shows'?: Array<ShowRound>;
    'questions'?: Array<QuestionCategory>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "questionsCount",
            "baseName": "questions_count",
            "type": "number"
        },
        {
            "name": "shows",
            "baseName": "shows",
            "type": "Array<ShowRound>"
        },
        {
            "name": "questions",
            "baseName": "questions",
            "type": "Array<QuestionCategory>"
        }    ];

    static getAttributeTypeMap() {
        return Category.attributeTypeMap;
    }
}

export class CategoryResponse {
    'category'?: Category;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "category",
            "baseName": "category",
            "type": "Category"
        }    ];

    static getAttributeTypeMap() {
        return CategoryResponse.attributeTypeMap;
    }
}

export class ErrorModel {
    'code': number;
    'message': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ErrorModel.attributeTypeMap;
    }
}

export class MetaModel {
    'currentPage'?: number;
    'nextPage'?: number;
    'prevPage'?: number;
    'totalPages'?: number;
    'totalCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currentPage",
            "baseName": "current_page",
            "type": "number"
        },
        {
            "name": "nextPage",
            "baseName": "next_page",
            "type": "number"
        },
        {
            "name": "prevPage",
            "baseName": "prev_page",
            "type": "number"
        },
        {
            "name": "totalPages",
            "baseName": "total_pages",
            "type": "number"
        },
        {
            "name": "totalCount",
            "baseName": "total_count",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return MetaModel.attributeTypeMap;
    }
}

export class Question {
    'id': number;
    'body'?: string;
    'response'?: string;
    'value'?: number;
    'category'?: CategoriesShows;
    'fromRound'?: QuestionRound;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "CategoriesShows"
        },
        {
            "name": "fromRound",
            "baseName": "from_round",
            "type": "QuestionRound"
        }    ];

    static getAttributeTypeMap() {
        return Question.attributeTypeMap;
    }
}

export class QuestionCategory {
    'id'?: number;
    'body'?: string;
    'response'?: string;
    'value'?: number;
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return QuestionCategory.attributeTypeMap;
    }
}

export class QuestionResponse {
    'question'?: Question;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "question",
            "baseName": "question",
            "type": "Question"
        }    ];

    static getAttributeTypeMap() {
        return QuestionResponse.attributeTypeMap;
    }
}

export class QuestionRound {
    'id'?: number;
    'name'?: string;
    'url'?: string;
    'fromShow'?: ShowRound;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "fromShow",
            "baseName": "from_show",
            "type": "ShowRound"
        }    ];

    static getAttributeTypeMap() {
        return QuestionRound.attributeTypeMap;
    }
}

export class QuestionSearches {
    'category'?: string;
    'body'?: string;
    'response'?: string;
    'value'?: number;
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "category",
            "baseName": "category",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return QuestionSearches.attributeTypeMap;
    }
}

export class QuestionsResponse {
    'questions'?: Array<QuestionsRoundsShows>;
    'meta'?: MetaModel;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "questions",
            "baseName": "questions",
            "type": "Array<QuestionsRoundsShows>"
        },
        {
            "name": "meta",
            "baseName": "meta",
            "type": "MetaModel"
        }    ];

    static getAttributeTypeMap() {
        return QuestionsResponse.attributeTypeMap;
    }
}

export class QuestionsRoundsShows {
    'id'?: number;
    'body'?: string;
    'response'?: string;
    'value'?: number;
    'url'?: string;
    'category'?: QuestionsRoundsShowsCategory;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "QuestionsRoundsShowsCategory"
        }    ];

    static getAttributeTypeMap() {
        return QuestionsRoundsShows.attributeTypeMap;
    }
}

export class QuestionsRoundsShowsCategory {
    'id'?: number;
    'name'?: string;
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return QuestionsRoundsShowsCategory.attributeTypeMap;
    }
}

export class Round {
    'id'?: number;
    'name'?: string;
    'fromShow'?: ShowRound;
    'categories'?: Array<CategoriesShows>;
    'questions'?: Array<QuestionsRoundsShows>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fromShow",
            "baseName": "from_show",
            "type": "ShowRound"
        },
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<CategoriesShows>"
        },
        {
            "name": "questions",
            "baseName": "questions",
            "type": "Array<QuestionsRoundsShows>"
        }    ];

    static getAttributeTypeMap() {
        return Round.attributeTypeMap;
    }
}

export class RoundResponse {
    'round'?: Round;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "round",
            "baseName": "round",
            "type": "Round"
        }    ];

    static getAttributeTypeMap() {
        return RoundResponse.attributeTypeMap;
    }
}

export class RoundsShows {
    'id'?: number;
    'name'?: string;
    'url'?: string;
    'questions'?: Array<QuestionsRoundsShows>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "questions",
            "baseName": "questions",
            "type": "Array<QuestionsRoundsShows>"
        }    ];

    static getAttributeTypeMap() {
        return RoundsShows.attributeTypeMap;
    }
}

export class Search {
    'resultType'?: string;
    'id'?: number;
    'name'?: string;
    'questionsCount'?: number;
    'category'?: CategoriesShows;
    'body'?: string;
    'response'?: string;
    'value'?: number;
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "resultType",
            "baseName": "result_type",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "questionsCount",
            "baseName": "questions_count",
            "type": "number"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "CategoriesShows"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Search.attributeTypeMap;
    }
}

export class SearchMeta {
    'query'?: string;
    'categoryCount'?: number;
    'questionsCount'?: number;
    'currentPage'?: number;
    'nextPage'?: number;
    'prevPage'?: number;
    'totalPages'?: number;
    'totalCount'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "query",
            "baseName": "query",
            "type": "string"
        },
        {
            "name": "categoryCount",
            "baseName": "category_count",
            "type": "number"
        },
        {
            "name": "questionsCount",
            "baseName": "questions_count",
            "type": "number"
        },
        {
            "name": "currentPage",
            "baseName": "current_page",
            "type": "number"
        },
        {
            "name": "nextPage",
            "baseName": "next_page",
            "type": "number"
        },
        {
            "name": "prevPage",
            "baseName": "prev_page",
            "type": "number"
        },
        {
            "name": "totalPages",
            "baseName": "total_pages",
            "type": "number"
        },
        {
            "name": "totalCount",
            "baseName": "total_count",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SearchMeta.attributeTypeMap;
    }
}

export class SearchResponse {
    'meta'?: SearchMeta;
    'results'?: Array<Search>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "meta",
            "baseName": "meta",
            "type": "SearchMeta"
        },
        {
            "name": "results",
            "baseName": "results",
            "type": "Array<Search>"
        }    ];

    static getAttributeTypeMap() {
        return SearchResponse.attributeTypeMap;
    }
}

export class ShowResponse {
    'show'?: Shows;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "show",
            "baseName": "show",
            "type": "Shows"
        }    ];

    static getAttributeTypeMap() {
        return ShowResponse.attributeTypeMap;
    }
}

export class ShowRound {
    'id'?: number;
    'showNumber'?: number;
    'airDate'?: string;
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "showNumber",
            "baseName": "show_number",
            "type": "number"
        },
        {
            "name": "airDate",
            "baseName": "air_date",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ShowRound.attributeTypeMap;
    }
}

export class Shows {
    'id'?: number;
    'showNumber'?: number;
    'airDate'?: string;
    'categories'?: Array<CategoriesShows>;
    'rounds'?: Array<RoundsShows>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "showNumber",
            "baseName": "show_number",
            "type": "number"
        },
        {
            "name": "airDate",
            "baseName": "air_date",
            "type": "string"
        },
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<CategoriesShows>"
        },
        {
            "name": "rounds",
            "baseName": "rounds",
            "type": "Array<RoundsShows>"
        }    ];

    static getAttributeTypeMap() {
        return Shows.attributeTypeMap;
    }
}

export class ShowsResponse {
    'shows'?: Array<Shows>;
    'meta'?: MetaModel;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "shows",
            "baseName": "shows",
            "type": "Array<Shows>"
        },
        {
            "name": "meta",
            "baseName": "meta",
            "type": "MetaModel"
        }    ];

    static getAttributeTypeMap() {
        return ShowsResponse.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "CategoriesIndex": CategoriesIndex,
    "CategoriesResponse": CategoriesResponse,
    "CategoriesShows": CategoriesShows,
    "Category": Category,
    "CategoryResponse": CategoryResponse,
    "ErrorModel": ErrorModel,
    "MetaModel": MetaModel,
    "Question": Question,
    "QuestionCategory": QuestionCategory,
    "QuestionResponse": QuestionResponse,
    "QuestionRound": QuestionRound,
    "QuestionSearches": QuestionSearches,
    "QuestionsResponse": QuestionsResponse,
    "QuestionsRoundsShows": QuestionsRoundsShows,
    "QuestionsRoundsShowsCategory": QuestionsRoundsShowsCategory,
    "Round": Round,
    "RoundResponse": RoundResponse,
    "RoundsShows": RoundsShows,
    "Search": Search,
    "SearchMeta": SearchMeta,
    "SearchResponse": SearchResponse,
    "ShowResponse": ShowResponse,
    "ShowRound": ShowRound,
    "Shows": Shows,
    "ShowsResponse": ShowsResponse,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum CategoryApiApiKeys {
}

export class CategoryApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: CategoryApiApiKeys, value: string) {
        (this.authentications as any)[CategoryApiApiKeys[key]].apiKey = value;
    }
    /**
     * Returns all categories paginated with 10 per page.</br> **categories**: Array containing categories</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **questions_count**: Number of questions having this category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Note that this only includes shows revealed during the show</br> **meta**: Information on pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **current_page**: Current page</br> &nbsp;&nbsp;&nbsp;&nbsp; **next_page**: Next page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **prev_page**: Previous page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_pages**: Total number of pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_count**: Total number of Category objects
     * @summary Retrieve all categories paginated in 10s
     * @param popular Limits results to X most popular categories. [Optional]
     * @param minimum Limits results to categories with at least this number of questions. [Optional]
     * @param page Go to particular page. [Optional]
     * @param {*} [options] Override http request options.
     */
    public findCategories (popular?: number, minimum?: number, page?: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: CategoriesResponse;  }> {
        const localVarPath = this.basePath + '/categories.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (popular !== undefined) {
            localVarQueryParameters['popular'] = ObjectSerializer.serialize(popular, "number");
        }

        if (minimum !== undefined) {
            localVarQueryParameters['minimum'] = ObjectSerializer.serialize(minimum, "number");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: CategoriesResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CategoriesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Fetch category by ID.</br> **category**</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp; **questions_count**: Number of questions having this category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Note that this only includes shows revealed during the show</br> &nbsp;&nbsp;&nbsp;&nbsp; **shows**: Array of shows in which this category appeared</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Show ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **show_number**: Jeopardy! show number</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **air_date**: Date the show aired YYYY-MM-DD</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to show</br> &nbsp;&nbsp;&nbsp;&nbsp; **questions**: Array of questions with this category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Question ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to question
     * @summary Retrieve a single category by ID
     * @param id ID of category to fetch
     * @param {*} [options] Override http request options.
     */
    public findCategoriesById (id: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: CategoryResponse;  }> {
        const localVarPath = this.basePath + '/categories/{id}.json'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findCategoriesById.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: CategoryResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CategoryResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum QuestionApiApiKeys {
}

export class QuestionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: QuestionApiApiKeys, value: string) {
        (this.authentications as any)[QuestionApiApiKeys[key]].apiKey = value;
    }
    /**
     * Returns paginated questions.</br> **questions**: Array containing questions</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: Question ID</br> &nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to category</br> **meta**: Information on pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **current_page**: Current page</br> &nbsp;&nbsp;&nbsp;&nbsp; **next_page**: Next page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **prev_page**: Previous page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_pages**: Total number of pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_count**: Total number of Question objects
     * @summary Retrieve all questions
     * @param newerThan Lower bound to search from (YYYY-MM-DD), starting from 1984-09-10 [Optional]
     * @param olderThan Upper bound to search to (YYYY-MM-DD), up to 2012-01-27 [Optional]
     * @param valueEquals Limit results to questions with this value; May not be used with value_greater or value_less. For Final Jeopardy! (or tiebreaker) questions, enter value 0. [Optional]
     * @param valueGreater Limit results to questions with value greater than (or equal to) this value [Optional]
     * @param valueLess Limit results to questions with value less than (or equal to) this value excluding questions with value of zero [Optional]
     * @param {*} [options] Override http request options.
     */
    public findAllQuestions (newerThan?: string, olderThan?: string, valueEquals?: number, valueGreater?: number, valueLess?: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: QuestionsResponse;  }> {
        const localVarPath = this.basePath + '/questions.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (newerThan !== undefined) {
            localVarQueryParameters['newer_than'] = ObjectSerializer.serialize(newerThan, "string");
        }

        if (olderThan !== undefined) {
            localVarQueryParameters['older_than'] = ObjectSerializer.serialize(olderThan, "string");
        }

        if (valueEquals !== undefined) {
            localVarQueryParameters['value_equals'] = ObjectSerializer.serialize(valueEquals, "number");
        }

        if (valueGreater !== undefined) {
            localVarQueryParameters['value_greater'] = ObjectSerializer.serialize(valueGreater, "number");
        }

        if (valueLess !== undefined) {
            localVarQueryParameters['value_less'] = ObjectSerializer.serialize(valueLess, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: QuestionsResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "QuestionsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a single question by ID.</br> **question**:</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: Question ID</br> &nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **from_round**: Information on round in which question appeared</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Round ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Jeopardy!, Double Jeopardy! or Final Jeopardy!</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **from_show**: Information on show in which round appeared</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Show ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **show_number**: Jeopardy! show number</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **air_date**: Date the show aired YYYY-MM-DD</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to show
     * @summary Retrieve a single question by ID
     * @param id ID of question to fetch
     * @param {*} [options] Override http request options.
     */
    public findQuestionById (id: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: QuestionResponse;  }> {
        const localVarPath = this.basePath + '/questions/{id}.json'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findQuestionById.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: QuestionResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "QuestionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a random question.</br> **question**:</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: Question ID</br> &nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **from_round**: Information on round in which question appeared</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Round ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Jeopardy!, Double Jeopardy! or Final Jeopardy!</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **from_show**: Information on show in which round appeared</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Show ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **show_number**: Jeopardy! show number</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **air_date**: Date the show aired YYYY-MM-DD</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to show
     * @summary Retrieve a random question
     * @param newerThan Lower bound to search from (YYYY-MM-DD), starting from 1984-09-10 [Optional]
     * @param olderThan Upper bound to search to (YYYY-MM-DD), up to 2012-01-27 [Optional]
     * @param valueEquals Limit results to questions with this value; May not be used with value_greater or value_less. For Final Jeopardy! (or tiebreaker) questions, enter value 0. [Optional]
     * @param valueGreater Limit results to questions with value greater than (or equal to) this value [Optional]
     * @param valueLess Limit results to questions with value less than (or equal to) this value excluding questions with value of zero [Optional]
     * @param {*} [options] Override http request options.
     */
    public findRandomQuestion (newerThan?: string, olderThan?: string, valueEquals?: number, valueGreater?: number, valueLess?: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: QuestionResponse;  }> {
        const localVarPath = this.basePath + '/questions/random.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (newerThan !== undefined) {
            localVarQueryParameters['newer_than'] = ObjectSerializer.serialize(newerThan, "string");
        }

        if (olderThan !== undefined) {
            localVarQueryParameters['older_than'] = ObjectSerializer.serialize(olderThan, "string");
        }

        if (valueEquals !== undefined) {
            localVarQueryParameters['value_equals'] = ObjectSerializer.serialize(valueEquals, "number");
        }

        if (valueGreater !== undefined) {
            localVarQueryParameters['value_greater'] = ObjectSerializer.serialize(valueGreater, "number");
        }

        if (valueLess !== undefined) {
            localVarQueryParameters['value_less'] = ObjectSerializer.serialize(valueLess, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: QuestionResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "QuestionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum RoundApiApiKeys {
}

export class RoundApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: RoundApiApiKeys, value: string) {
        (this.authentications as any)[RoundApiApiKeys[key]].apiKey = value;
    }
    /**
     * Use to retrieve a single round by ID. </br> _Explanation of response attributes_</br> **round**</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of round</br> &nbsp;&nbsp;&nbsp;&nbsp; **name**: Jeopardy!, Double Jeopardy! or Final Jeopardy!</br> &nbsp;&nbsp;&nbsp;&nbsp; **from_show**: Information about show where this round appeared</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of show</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **show_number**: Jeopardy! show number</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **air_date**: Date the show aired YYYY-MM-DD</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to show</br> &nbsp;&nbsp;&nbsp;&nbsp; **categories**: Array of categories appearing in round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **questions**: Array of questions appearing in round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to category
     * @summary Retrieve a single round by ID
     * @param id ID of round to fetch.
     * @param {*} [options] Override http request options.
     */
    public findRoundById (id: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: RoundResponse;  }> {
        const localVarPath = this.basePath + '/rounds/{id}.json'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findRoundById.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: RoundResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "RoundResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SearchApiApiKeys {
}

export class SearchApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SearchApiApiKeys, value: string) {
        (this.authentications as any)[SearchApiApiKeys[key]].apiKey = value;
    }
    /**
     * Search across questions and categories</br> _Explanation of response attributes_</br> **meta**: Object explaining results and pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **query**: Search term</br> &nbsp;&nbsp;&nbsp;&nbsp; **category_count**: Number of categories matching query</br> &nbsp;&nbsp;&nbsp;&nbsp; **question_count**: Number of questions matching query</br> &nbsp;&nbsp;&nbsp;&nbsp; **current_page**: Current page</br> &nbsp;&nbsp;&nbsp;&nbsp; **next_page**: Next page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **prev_page**: Previous page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_pages**: Total number of pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_count**: Total number of search results</br> **results**: Array containing results; Note: results are either a Question or a Category</br> &nbsp;&nbsp;&nbsp;&nbsp; **result_type**: Question or Category</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: Question/Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp; **name**: Name of category (Only shows when result type is Category)</br> &nbsp;&nbsp;&nbsp;&nbsp; **questions_count**: Number of questions having this category (Only shows when result type is Category)</br> &nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question (Only shows when result type is Question)</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: Category ID</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue (Only shows when result type is Question)</br> &nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer (Only shows when result type is Question)</br> &nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value (Only shows when result type is Question)</br> &nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to question or category
     * @summary Search across questions and categories
     * @param query Search term or phrase.
     * @param only Limit results to either questions or categories only. Valid values are &#x60;Question&#x60; and &#x60;Category&#x60; [Optional]
     * @param {*} [options] Override http request options.
     */
    public search (query: string, only?: string, options: any = {}) : Promise<{ response: http.IncomingMessage; body: SearchResponse;  }> {
        const localVarPath = this.basePath + '/search.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling search.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (only !== undefined) {
            localVarQueryParameters['only'] = ObjectSerializer.serialize(only, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: SearchResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SearchResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ShowApiApiKeys {
}

export class ShowApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ShowApiApiKeys, value: string) {
        (this.authentications as any)[ShowApiApiKeys[key]].apiKey = value;
    }
    /**
     * Use to retrieve one show by id </br> _Explanation of response attributes_</br> **show**</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of show</br> &nbsp;&nbsp;&nbsp;&nbsp; **show_number**: Jeopardy! show number</br> &nbsp;&nbsp;&nbsp;&nbsp; **air_date**: Date the show aired YYYY-MM-DD</br> &nbsp;&nbsp;&nbsp;&nbsp; **categories**: Array of categories appearing in show</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **rounds**: Array of rounds appearing in show</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of rounds</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Jeopardy!, Double Jeopardy! or Final Jeopardy!</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **questions**: Array of questions appearing in round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to category
     * @summary Retrieve a single show by ID
     * @param id ID of show to fetch.
     * @param {*} [options] Override http request options.
     */
    public findShowById (id: number, options: any = {}) : Promise<{ response: http.IncomingMessage; body: ShowResponse;  }> {
        const localVarPath = this.basePath + '/shows/{id}.json'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findShowById.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ShowResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ShowResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use to retrieve all shows with three objects per page. </br> _Explanation of response attributes_</br> **shows**: Array of 3 shows</br> &nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of show</br> &nbsp;&nbsp;&nbsp;&nbsp; **show_number**: Jeopardy! show number</br> &nbsp;&nbsp;&nbsp;&nbsp; **air_date**: Date the show aired YYYY-MM-DD</br> &nbsp;&nbsp;&nbsp;&nbsp; **categories**: Array of categories appearing in show</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to category</br> &nbsp;&nbsp;&nbsp;&nbsp; **rounds**: Array of rounds appearing in show</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of rounds</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Jeopardy!, Double Jeopardy! or Final Jeopardy!</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **questions**: Array of questions appearing in round</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **body**: Jeopardy! clue</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **response**: Jeopardy! answer</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **value**: Question dollar value; Final Jeopardy questions have 0 value</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: Link to question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **category**: Category of question</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **id**: ID of category</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **name**: Category name</br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **url**: link to category</br> **meta**: Information on pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **current_page**: Current page</br> &nbsp;&nbsp;&nbsp;&nbsp; **next_page**: Next page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **prev_page**: Previous page, if available</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_pages**: Total number of pages</br> &nbsp;&nbsp;&nbsp;&nbsp; **total_count**: Total number of Show objects
     * @summary Retrieve all shows paginated in 3's
     * @param page Go to particular page. [Optional]
     * @param chronoSort \&quot;old\&quot; to sort in ascending chronological order, \&quot;recent\&quot; for descending. [Optional]
     * @param {*} [options] Override http request options.
     */
    public findShows (page?: number, chronoSort?: string, options: any = {}) : Promise<{ response: http.IncomingMessage; body: ShowsResponse;  }> {
        const localVarPath = this.basePath + '/shows.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (chronoSort !== undefined) {
            localVarQueryParameters['chrono_sort'] = ObjectSerializer.serialize(chronoSort, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ShowsResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ShowsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
